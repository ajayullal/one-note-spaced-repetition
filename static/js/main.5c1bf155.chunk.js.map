{"version":3,"sources":["services/utils.service.ts","services/route.service.ts","services/config.ts","services/client-side-data-storage.service.ts","services/user.service.ts","services/error-handler.service.ts","services/microsoft-one-note.service.ts","services/index.ts","components/header/Header.tsx","components/error-alert/ErrorAlert.tsx","components/nav-drawer/nav-drawer.tsx","components/nav-drawer/index.ts","components/layout/layout.tsx","HOCs/withAuth.tsx","hooks/useAuth.ts","components/Nothing/Nothing.tsx","components/card-list/CardList.tsx","screens/Notebooks/Notebooks.tsx","screens/Notebooks/useBooks.ts","screens/Sections/Sections.tsx","screens/Sections/useSections.ts","hooks/useDB.ts","services/date.service.ts","services/pages.service.ts","components/pagesList/pagesList.tsx","screens/Pages/Pages.tsx","screens/Pages/usePages.ts","screens/Timer/QuitDialog.tsx","screens/Timer/Timer.tsx","screens/RecentlyRevisedPages/Pages.tsx","screens/Stats/statsService.ts","screens/Stats/statsProvider.tsx","screens/Stats/Charts.tsx","screens/Stats/Stats.tsx","screens/CustomTimer/TaskNameInput/state/reducer.js","screens/CustomTimer/TaskNameInput/state/actions.js","screens/CustomTimer/TaskNameInput/TaskNameProvider.tsx","screens/CustomTimer/TaskNameInput/useData.js","screens/CustomTimer/TaskNameInput/NotebookSelectBox/NotebookSelectBox.tsx","screens/CustomTimer/TaskNameInput/SectionSelectBox/SectionSelectBox.tsx","screens/CustomTimer/TaskNameInput/TaskNameInput.tsx","screens/index.ts","screens/Login/Login.tsx","screens/CustomTimer/CustomTimer.tsx","App.tsx","serviceWorker.ts","index.tsx","screens/CustomTimer/TaskNameInput/_taskNameInput.module.scss","logo.svg"],"names":["UtilsService","notificationSoundElem","document","createElement","this","src","url","params","Object","entries","forEach","key","value","replace","number","Number","toFixed","srcStr","searchStr","toLowerCase","trim","split","filter","word","startsWith","length","play","_instance","getInstance","history","createHashHistory","routeConfig","notebooks","name","path","isHomePage","icon","Book","sections","MenuBook","login","pages","Note","timer","Timer","recentlyRevisedPages","recentlyCreatedPages","stats","customTimer","breadCrumbs","RouteService","routeName","homeRoute","find","route","routeInfo","getRouteInfo","serverBase","utilsService","replaceParamsInUrl","push","getRouteUrl","gotoUrl","info","timerUrl","self","encodeURIComponent","sectionId","sectionName","title","search","noteBook","_serverBase","domain","msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","themeConfig","drawerWidth","r","ClientSideDataStorage","storage","localforage","createInstance","localStorage","setItem","removeItemSync","getItem","removeItem","UserService","_userDetails","userDetails","clientStorage","getItemSync","JSON","parse","tokenResponse","Boolean","details","_userService","errorMessage","ErrorHandlerService","handleError","error","console","message","logout","Promise","reject","response","data","userService","window","location","routerService","axios","_axios","create","baseURL","headers","interceptors","use","dbPageId","apiEndPoints","sectionPages","content","MicrosoftOneNoteApi","_redirectUrl","_db","_dbCellDelimiter","myMSALObj","requestObj","scopes","loginHint","Msal","checkAndSetPersistedBearerToken","log","tokenType","accessToken","setTimeout","acquireTokenPopup","bind","isRenewal","setItemSync","stringify","setBearerToken","setUserDetails","idToken","preferredName","acquireTokenSilent","then","onToken","checkTokenExpiryAndRenew","catch","handleRedirectCallback","authRedirectCallBack","loginPopup","loginResponse","alert","token","defaults","common","resp","get","returnValue","errorHandlerService","notebookId","id","page","parentSection","displayName","selfUrl","sessionDetails","patch","resolve","getDb","db","doc","DOMParser","parseFromString","ps","Array","from","getElementsByTagName","_rows","p","textContent","contentUrl","microsoftOneNoteApi","_routerService","_utilsService","pageName","hideNavDrawer","toggleNavDrawer","classes","makeStyles","theme","createStyles","appBar","breakpoints","up","width","marginLeft","menuButton","marginRight","spacing","display","homeButton","toolbar","justifyContent","padding","paddingRight","useStyles","isLoginPage","className","account","ExitToApp","onClick","Typography","gutterBottom","menuIcon","IconButton","color","aria-label","edge","AppBar","position","Toolbar","variant","noWrap","style","top","isLoggedIn","useEffect","marginTop","props","elevation","severity","drawer","flexShrink","drawerPaper","mixins","NavDrawer","open","onClose","children","useTheme","logo","height","Divider","Hidden","smUp","implementation","Drawer","anchor","direction","paper","ModalProps","keepMounted","xsDown","root","flexGrow","link","breadcrumb","marginBottom","hide","withRouter","useState","navOpen","setNavOpen","CssBaseline","ErrorAlert","Header","useCallback","List","ListItem","routeService","button","ListItemIcon","ListItemText","primary","Component","mons","redirectUrl","match","component","card","cursor","items","displayPropName","render","keyProp","item","Grid","container","map","xs","md","Card","CardContent","Nothing","withAuth","noteBooks","setNoteBooks","setErrorMessage","microsoftOneNoteService","getAllNoteBooks","allBooks","useBooks","noteBooksGrid","CardList","goTo","LinearProgress","useSections","getAllSection","filteredSections","setFilteredSections","sectionsGrid","TextField","fullWidth","autoComplete","label","onChange","event","searchTxt","target","_filteredSections","section","containsWord","setDb","loading","setLoading","getAllDBRows","finally","DateService","date1","date2","_date1","Date","_date2","diffTime","Math","abs","ceil","date","trunc","Pages","sort","page1","page2","sessions","startDate","pageTitleToSessions","row","session","daysDiffFromToday","dateService","diffFromToday","addSessionDiffFromToday","sortPages","viewPageInfo","filteredPages","index","startTime","links","stopPropagation","oneNoteClientUrl","href","float","setPages","getSectionPages","usePages","setFilteredPages","useDb","dblLoading","setSectionName","mergeDBAndPageData","pagesService","_filteredPages","onQuit","isRevision","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogActions","Button","autoFocus","table","minWidth","pageSessions","getSessionsFromDB","allPages","pageTitle","StatsService","dbDateMap","formatDate","totalTimeSpent","minutesSpentLearning","round","hoursSpentLearning","totalTimeSpentHours","rows","keys","reverse","totalTime","reduce","sum","averageTime","dtArr","month","join","StatsContext","React","createContext","dbLoading","statsService","formatData","getTotalAndAverageTime","Provider","select","TableComponent","useContext","rowsPerPage","setRowsPerPage","currentPage","setCurrentPage","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","slice","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","StatsComponent","Charts","initialState","selectedNotebook","taskName","selectedSection","custom","reducer","state","action","type","loadingSections","TaskNameContext","useReducer","dispatch","useData","loadSections","NotebookSelectBox","taskNameContext","Select","labelId","selectBox","notebook","MenuItem","SectionSelectBox","SectionSelection","TaskNameInput","selectBoxCntr","selectBoxGrid","taskInput","disabled","TaskNameProvider","Login","onSignInSuccess","useLayoutEffect","onSignIn","xmlns","viewBox","fill","d","x","y","Notebooks","Sections","sliderValue","setSliderValue","isTicking","setTicking","timeLeft","setTimeLeft","timeLeftPercent","setTimeLeftPercent","openQuitDialog","setQuitDialog","setRows","totalMinutes","setTotalMinutes","totalStudyTime","setTotalStudyTime","totalRevisionTime","setTotalRevisionTime","revisionMode","setRevisionMode","timeElapsedTxt","setTimeElapsedTxt","startMillis","useRef","sliderValueRef","counterIntervalRef","pageDetails","revisionClicked","_totalMinutes","_totalStudyTime","_totalRevisionTime","current","repetition","URLSearchParams","pageUrl","getPage","_pageDetails","decodeURI","isCustomTask","getHomeRoute","PrettoSlider","withStyles","thumb","backgroundColor","border","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","getTimeLeftTxt","totalMillis","totalSecondsLeft","now","getTime","minutesLeft","secondsLeft","getPercentTimeLeft","getRowDetails","totalMillisSpeantLeaning","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","totalSessionMinutes","pageId","stopTimer","rowDetails","updateOneNoteDB","clearInterval","playNotificatiomSound","startTimer","setInterval","studyHistory","opacity","getRevisionTime","seconds","minutes","revisionSwitch","FormControl","FormGroup","FormControlLabel","control","Switch","checked","isRevisionMode","studyModeHeader","studyModeSlider","useMemo","minHeight","paddingTop","paddingBottom","valueBuffer","valueLabelDisplay","min","step","max","defaultValue","checkAndStartTimer","time","getTimeElapsedTxt","timerButtons","revisionModeHeader","QuitDialog","checkAndSetRevisionMode","RecentlyRevisedPages","Stats","CustomTimer","App","msal","exact","Screens","to","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5c1bf155.chunk.js","sourcesContent":["class UtilsService{\n    static _instance: UtilsService;\n    private notificationSoundElem = document.createElement('audio');\n\n    constructor(){\n        this.notificationSoundElem.src = 'data:audio/mp3;base64, ';    \n    }\n\n   replaceParamsInUrl(url: string, params: {[key: string]: any}){\n        Object.entries(params).forEach(([key, value]) => {\n            url = url.replace(`:${key}`, value);\n        });\n\n        return url;\n    }\n\n    round(number: number | string, precision = 2){\n        return Number(Number(number).toFixed(2));\n    }\n\n    containsWord(srcStr: string, searchStr: string){\n        searchStr = searchStr.toLowerCase().trim();\n        srcStr = srcStr.toLowerCase().trim();\n        const words = srcStr.split(' ');\n        return words.filter((word: string) => {\n            return word.startsWith(searchStr);\n        }).length > 0;\n    }\n\n    playNotificatiomSound(){\n        this.notificationSoundElem.play();\n    }\n    \n    static getInstance(){\n        if(!UtilsService._instance){\n            UtilsService._instance = new UtilsService();\n        }\n\n        return UtilsService._instance;\n    }\n}\n\nexport default UtilsService.getInstance();","import utilsService from './utils.service';\nimport {Book, MenuBook, Note, Timer} from '@material-ui/icons';\nimport {serverBase} from './config';\nimport { createHashHistory } from 'history'\nexport const history = createHashHistory()\n\nexport const routeConfig: { [key: string]: any }  = {\n    notebooks: {\n        name: 'Notebooks',\n        path: '/notebooks',\n        isHomePage: true,\n        icon: Book\n    },\n    sections: {\n        name: 'Sections',\n        path: '/notebooks/:id',\n        icon: MenuBook\n    },\n    login: {\n        name: 'Login',\n        path: '/login'\n    },\n    pages: {\n        name: 'Pages',\n        path: '/sections/:id/pages',\n        icon: Note\n    },\n    timer: {\n        name: 'Timer',\n        path: '/timer',\n        icon: Timer\n    },\n    recentlyRevisedPages: {\n        name: 'Recently Revised Pages',\n        path: '/recently-revised-pages'\n    },\n    recentlyCreatedPages: {\n        name: 'Recently Edited Pages',\n        path: '/recently-edited-pages'\n    },\n    stats: {\n        name: 'Stats',\n        path: '/stats'\n    },\n    customTimer: {\n        name: 'Timer',\n        path: '/custom-timer'\n    }\n};\n\nexport const breadCrumbs: {[key: string]: any} = {\n    [routeConfig.sections.name]: [routeConfig.notebooks],\n    [routeConfig.pages.name]: [routeConfig.notebooks, routeConfig.sections]\n};\n\nclass RouteService{\n    static _instance: RouteService;\n\n    getBreadCrumbs(routeName: string){\n        return breadCrumbs[routeName];\n    }\n\n    getHomeRoute(){\n        let homeRoute = Object.entries(routeConfig).find((route: any) => route[1].isHomePage);\n        return homeRoute? homeRoute[1] : null;\n    }\n\n    getRouteInfo(name: string){\n        return routeConfig[name];\n    }\n\n    getRouteUrl(name: string, params: {} = {}){\n        const routeInfo = this.getRouteInfo(name);\n        // return `${serverBase}#${utilsService.replaceParamsInUrl(routeInfo.path, params)}`;\n        return `${serverBase}/#${utilsService.replaceParamsInUrl(routeInfo.path, params)}`;\n    }\n\n    gotoUrl(url: string){\n        history.push(url.replace(`${serverBase}/#`, ''));\n    }\n\n    goTo(name: string, params: {} = {}){\n        const url = this.getRouteUrl(name, params);\n        this.gotoUrl(url);\n    }\n\n    viewPageInfo(info: any){\n        let  timerUrl = this.getRouteUrl('timer');\n        \n        if(info.self){\n            this.gotoUrl(`${timerUrl}?pageUrl=${encodeURIComponent(info.self)}`);\n        }else if(info.sectionId && info.sectionName && info.title){\n            let search = `?pageTitle=${encodeURIComponent(info.title)}&sectionId=${info.sectionId}&sectionName=${info.sectionName}&noteBook=${info.noteBook}`;\n            this.gotoUrl(`${timerUrl}${search}`);\n        }\n    }\n\n    static getInstance(){\n        if(!RouteService._instance){\n            RouteService._instance = new RouteService();\n        }\n\n        return RouteService._instance;\n    }\n}\n\nexport default RouteService.getInstance();\n","import * as Msal from 'msal';\nimport {routeConfig as r} from './route.service';\n\nlet _serverBase = 'https://ajayullal.github.io/one-note-spaced-repetition';\n\nif(document.domain === 'localhost'){\n    _serverBase = 'http://localhost:3000';\n}\n\nexport const serverBase = _serverBase;\n\nexport const msalConfig: Msal.Configuration = {\n    auth: {\n        clientId: \"7909dc21-ee19-4123-8ff2-9f21085c8447\",\n        authority: \"https://login.microsoftonline.com/common\",\n        // redirectUri: `${serverBase}/auth`\n        redirectUri: `${serverBase}/notebooks`\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\",\n        storeAuthStateInCookie: true\n    }\n};\n\nexport const themeConfig = {\n    drawerWidth: 240\n};\n\nexport const apiConfig = {\n    // serverBase: 'http://localhost:4006'\n    serverBase: 'https://graph.microsoft.com/v1.0/me/onenote'\n};\n\nexport const appTexts = {\n    appName: 'Spaced Repetition'\n};\n\nexport const routeConfig = r;\n\nexport default {\n    themeConfig,\n    appTexts,\n    apiConfig,\n    msalConfig,\n    routeConfig\n}\n","import localforage from \"localforage\";\n\nclass ClientSideDataStorage {\n    private storage = localforage.createInstance({\n        name: \"nameHere\"\n    });\n\n    setItemSync(key:string, value: string){\n        if(value){\n            localStorage.setItem(key, value);\n        }else{\n            this.removeItemSync(key);\n        }\n    }\n\n    getItemSync(key:string){\n        return localStorage.getItem(key)\n    }\n\n    removeItemSync(key:string){\n        return localStorage.removeItem(key);\n    }\n\n    setItem(key:any, value: any){\n        this.storage.setItem(key, value);\n    }\n\n    getItem(key: any){\n        return this.storage.getItem(key);\n    }\n\n    removeItem(key: any){\n        return this.storage.removeItem(key);\n    }\n\n    static _instance: ClientSideDataStorage;\n\n    static getInstance() {\n        if (!ClientSideDataStorage._instance) {\n            ClientSideDataStorage._instance = new ClientSideDataStorage();\n        }\n\n        return ClientSideDataStorage._instance;\n    }\n}\n\nexport default ClientSideDataStorage.getInstance();","import clientStorage from './client-side-data-storage.service';\n\nclass UserService {\n    static _userService: UserService;\n    _userDetails: any;\n\n    constructor(){\n        const userDetails = clientStorage.getItemSync('userDetails');\n\n        if(userDetails){\n            this._userDetails = JSON.parse(userDetails);\n        }\n    }\n\n    set userDetails(details: any) {\n        this._userDetails = details;\n    }\n\n    get userDetails() {\n        return this._userDetails;\n    }\n\n    getToken(){\n        const tokenResponse = clientStorage.getItemSync('tokenResponse');\n        return tokenResponse? JSON.parse(tokenResponse): null;\n    }\n\n    isLoggedIn(): Boolean {\n        return Boolean(clientStorage.getItemSync('tokenResponse'));\n    }\n\n    logout(){\n        return Boolean(clientStorage.removeItemSync('tokenResponse'));\n    }\n\n    static getInstance() {\n        if (!UserService._userService) {\n            UserService._userService = new UserService();\n        }\n\n        return UserService._userService;\n    }\n}\n\nexport default UserService.getInstance();","import {userService, routerService} from './';\n\nconst errorMessage = {\n    401: \"Request failed with status code 401\"\n};\n\nclass ErrorHandlerService {\n    static _instance: ErrorHandlerService;\n\n    constructor() {\n\n    }\n\n    logout() {\n        userService.logout();\n        window.location.replace(routerService.getRouteUrl('login')) \n    }\n\n    handleError = (error: any) => {\n        console.error(error);\n\n        switch (error.message) {\n            case errorMessage['401']: \n                        this.logout();\n                        break;\n        }\n\n        return Promise.reject(error.message || error.response.data.message)\n    }\n\n    static getInstance() {\n        if (!ErrorHandlerService._instance) {\n            ErrorHandlerService._instance = new ErrorHandlerService();\n        }\n        return ErrorHandlerService._instance;\n    }\n}\n\nexport default ErrorHandlerService.getInstance();","import { default as _axios } from 'axios';\nimport { msalConfig } from './config';\nimport * as Msal from 'msal';\nimport userService from './user.service';\nimport utilsService from './utils.service';\nimport clientStorage from \"./client-side-data-storage.service\";\nimport errorHandlerService from \"./error-handler.service\";\nimport routerService, { history } from './route.service';\n\nconst axios = _axios.create({\n    baseURL: 'https://graph.microsoft.com/v1.0/me/onenote',\n    headers: {\n\n    }\n});\n\naxios.interceptors.response.use(response => response.data, error => Promise.reject(error));\n\nconst dbPageId = '0-f2f6afa638c1864cb26399b2a7cef5f7!1-E6AC34B29128DCBF!2176';\n\nconst apiEndPoints = {\n    notebooks: '/notebooks',\n    sections: '/notebooks/:id/sections',\n    sectionPages: '/sections/:id/pages?top=100',\n    content: `/pages/${dbPageId}/content`,\n    pages: '/pages?top=100'\n};\n\nclass MicrosoftOneNoteApi {\n    private _redirectUrl: string | null = null;\n    private _db: any;\n    private _dbCellDelimiter = '!@#';\n\n    public get redirectUrl(): string | null {\n        return this._redirectUrl;\n    }\n\n    public set redirectUrl(value: string | null) {\n        this._redirectUrl = value;\n    }\n\n    myMSALObj: any;\n    static microsoftOneNoteApi: any;\n\n    //, \"Notes.ReadWrite.All\", \"Notes.ReadWrite\", \"Notes.Read\", \"Notes.Create\"\n    requestObj = {\n        scopes: [\"Notes.Read.All\"],\n        loginHint: null\n    };\n\n    constructor() {\n        this.myMSALObj = new Msal.UserAgentApplication(msalConfig);\n        this.checkAndSetPersistedBearerToken();\n    }\n\n    authRedirectCallBack(error: any, response: any) {\n        if (error) {\n            console.log(error);\n        }\n        else {\n            if (response.tokenType === \"access_token\") {\n                console.log(response.accessToken);\n            } else {\n                console.log(\"token type is:\" + response.tokenType);\n            }\n        }\n    }\n\n    checkTokenExpiryAndRenew() {\n        // Refresh every 1 minute\n        setTimeout(this.acquireTokenPopup.bind(this, true), (1000 * 60));\n    }\n\n    onToken(tokenResponse: any, isRenewal: boolean) {\n        clientStorage.setItemSync('tokenResponse', JSON.stringify(tokenResponse));\n        this.setBearerToken(tokenResponse.accessToken);\n        this.setUserDetails(userService.userDetails);\n\n        if (!isRenewal) {\n            history.push(routerService.getRouteUrl('notebooks'));\n        }\n    }\n\n    acquireTokenPopup(isRenewal = false) {\n        //Always start with acquireTokenSilent to obtain a token in the signed in user from cache\n        //loginHint: this.userName \n        let tokenResponse: any = clientStorage.getItemSync('tokenResponse');\n\n        if (tokenResponse) {\n            tokenResponse = JSON.parse(tokenResponse);\n            this.requestObj.loginHint = tokenResponse.idToken.preferredName;\n        }\n        \n        this.myMSALObj.acquireTokenSilent(this.requestObj).then((tokenResponse: any) => {\n            this.onToken(tokenResponse, isRenewal);\n            this.checkTokenExpiryAndRenew();\n        }).catch((error: any) => {\n            console.error(error);\n            this.myMSALObj.acquireTokenPopup(this.requestObj).then((tokenResponse: any) => {\n                this.onToken(tokenResponse, isRenewal);\n                this.checkTokenExpiryAndRenew();\n            }).catch((error: any) => {\n                console.error(error);\n            });\n        });\n    }\n\n    setUserDetails(userDetails: any) {\n        clientStorage.setItemSync('userDetails', JSON.stringify(userDetails));\n    }\n\n    onSignIn() {\n        this.myMSALObj.handleRedirectCallback(this.authRedirectCallBack);\n\n        return this.myMSALObj.loginPopup(this.requestObj).then((loginResponse: any) => {\n            this.acquireTokenPopup();\n        }).catch((error: any) => {\n            alert(error);\n        });\n    }\n\n    checkAndSetPersistedBearerToken() {\n        const token = clientStorage.getItemSync('token');\n\n        if (token) {\n            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        }\n    }\n\n    setBearerToken(token: string) {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        clientStorage.setItemSync('token', token);\n    }\n\n    private returnValue(resp: any) {\n        return resp.value\n    }\n\n    getAllNoteBooks() {\n        return axios.get(apiEndPoints.notebooks).then(this.returnValue).catch(errorHandlerService.handleError);\n    }\n\n    getAllSection(notebookId: string) {\n        return axios.get(utilsService.replaceParamsInUrl(apiEndPoints.sections, { id: notebookId })).then(this.returnValue).catch(errorHandlerService.handleError);\n    }\n\n    getAllPages() {\n        return axios.get(apiEndPoints.pages).then((response: any) => {\n            return response.value.filter((page: any) => page.id !== dbPageId && page.parentSection.displayName !== \"Work\");\n        }).catch(errorHandlerService.handleError);\n    }\n\n    getSectionPages(sectionId: string) {\n        return axios.get(utilsService.replaceParamsInUrl(apiEndPoints.sectionPages, { id: sectionId })).then(response => {\n            const _response = this.returnValue(response);\n            return _response.filter((page: any) => page.title);\n        }).catch(errorHandlerService.handleError);\n    }\n\n    getPage(selfUrl: string) {\n        return axios.get(selfUrl).catch(errorHandlerService.handleError);\n    }\n\n    updateOneNoteDB(sessionDetails: any) {\n        let content = JSON.stringify(sessionDetails);\n\n        return axios.patch(apiEndPoints.content,\n            [\n                {\n                    'target': 'body',\n                    'action': 'append',\n                    'content': `<p>${content}</p>`\n                }\n            ]\n        ).then(data => this._db = null).catch(errorHandlerService.handleError);\n    }\n\n    getAllDBRows() {\n        return new Promise((resolve, reject) => {\n            this.getDb().then((db: string) => {\n                var doc = new DOMParser().parseFromString(db, \"text/xml\");\n                const ps = Array.from(doc.getElementsByTagName('p'));\n                const _rows: any[] = [];\n                ps.forEach(p => {\n                    let content: any = p?.textContent?.split(this._dbCellDelimiter)[0];\n                    content = JSON.parse(content);\n                    // content.totalSessionMinutes = utilsService.round(Number(content.totalSessionMinutes));\n                    _rows.push(content);\n                });\n                resolve(_rows);\n            }).catch(reject);\n        });\n    }\n\n    getDb() {\n        if (this._db) {\n            return Promise.resolve(this._db);\n        } else {\n            return axios.get(apiEndPoints.content).then(db => {\n                return this._db = db;\n            }).catch(errorHandlerService.handleError);\n        }\n    }\n\n    getPageContent(contentUrl: string) {\n        return axios.get(contentUrl).catch(errorHandlerService.handleError);\n    }\n\n    static getInstance() {\n        if (!MicrosoftOneNoteApi.microsoftOneNoteApi) {\n            MicrosoftOneNoteApi.microsoftOneNoteApi = new MicrosoftOneNoteApi();\n        }\n\n        return MicrosoftOneNoteApi.microsoftOneNoteApi;\n    }\n}\n\nexport default MicrosoftOneNoteApi.getInstance();","import _clientStorage from './client-side-data-storage.service';\nimport _mons from './microsoft-one-note.service';\nimport _routerService from './route.service';\nimport _userService from './user.service';\nimport _errorHandlerService from './error-handler.service';\nimport _utilsService from './utils.service';\n\nexport const clientStorage = _clientStorage;\nexport const mons = _mons;\nexport const routerService = _routerService;\nexport const userService = _userService;\nexport const errorHandlerService = _errorHandlerService;\nexport const utilsService = _utilsService;","import React from 'react';\nimport './header.scss';\nimport { AppBar, Toolbar, IconButton, Typography, makeStyles, createStyles, Theme } from '@material-ui/core';\nimport { ExitToApp } from '@material-ui/icons';\nimport IHeader from \"./IHeader\";\nimport { themeConfig } from '../../services/config';\nimport { userService, routerService } from '../../services';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = (hideNavDrawer: IHeader['hideNavDrawer']) => {\n    return makeStyles((theme: Theme) =>\n        createStyles({\n            appBar: {\n                [theme.breakpoints.up('sm')]: {\n                    width: hideNavDrawer ? '100%' : `calc(100% - ${themeConfig.drawerWidth}px)`,\n                    marginLeft: themeConfig.drawerWidth\n                },\n            },\n            menuButton: {\n                marginRight: theme.spacing(2),\n                [theme.breakpoints.up('sm')]: {\n                    display: 'none'\n                }\n            },\n            homeButton: {\n                marginLeft: '10px',\n                marginRight: '5px'\n            },\n            toolbar: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                padding: '0px',\n                paddingRight: '15px'\n            }\n        })\n    );\n}\n\nexport default ({ pageName, hideNavDrawer = false, history, toggleNavDrawer }: IHeader) => {\n    const classes = useStyles(hideNavDrawer)();\n    const loginRouteInfo = routerService.getRouteInfo('login');\n    const isLoginPage = pageName === loginRouteInfo.name;\n\n    const logout = () => {\n        userService.logout();\n        history.push(routerService.getRouteUrl('login'));\n    };\n\n    const userDetails = (<div className=\"account-details\">\n        <span className=\"user-name\">{userService.userDetails?.account.name}</span>\n        <ExitToApp onClick={logout} className=\"cursor-pointer\" />\n        <Typography onClick={logout} className=\"logout\" gutterBottom>\n            Logout\n        </Typography>\n    </div>);\n\n    const menuIcon = (\n        <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            className={classes.homeButton}\n            onClick={toggleNavDrawer}>\n            <MenuIcon />\n        </IconButton>\n    );\n\n    return (\n        <>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar className={classes.toolbar}>\n                    <Typography variant=\"h6\" noWrap>\n                        <>\n                            {\n                                !isLoginPage ? menuIcon : ''\n                            }\n\n                            <span style={{ marginLeft: isLoginPage ? '23px' : '', position: 'relative', top: '2px' }}>{pageName}</span>\n                        </>\n                    </Typography>\n\n                    {userService.isLoggedIn() ? userDetails : null}\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n};\n","import React, {useEffect} from 'react';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nexport default ({errorMessage}: any) => {\n    useEffect(() => {}, [errorMessage]);\n\n    function Alert(props: any) {\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n    }\n\n    const handleClose = (event: any, reason: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        errorMessage = ''\n    };\n\nreturn (\n        <>     \n            {errorMessage? (\n                <div style={{\n                    marginTop: '70px',\n                    width: '110%',\n                    marginLeft: '50px'\n                }}>\n                    <Alert severity=\"error\">\n                        {errorMessage}\n                    </Alert>\n                </div>\n            ): null}\n        </>);\n};","import React from 'react';\nimport { Drawer, Divider, Hidden, Typography } from '@material-ui/core';\nimport { createStyles, Theme, makeStyles, useTheme } from '@material-ui/core/styles';\nimport { themeConfig } from '../../services/config';\nimport INavDrawer from './INavDrawer';\nimport logo from '../../logo.svg';\nimport './nav-drawer.scss';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        drawer: {\n            [theme.breakpoints.up('sm')]: {\n                flexShrink: 0,\n            }\n        },\n        drawerPaper: {\n            width: themeConfig.drawerWidth,\n        },\n        toolbar: theme.mixins.toolbar\n    })\n);\n\nexport default ({ open, onClose, children }: INavDrawer) => {\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const drawer = (\n        <div>\n            <div className=\"logo-container\">\n                <img src={logo} width=\"40\" height=\"40\" />\n                <Typography className=\"app-name\" variant=\"h6\">\n                    {/* {appTexts.appName} */}\n                    <ArrowBackIosIcon onClick={onClose} className=\"closeIcon\"></ArrowBackIosIcon>\n                </Typography>\n            </div>\n\n            <Divider />\n\n            {children}\n        </div>\n    );\n\n    return (\n        <nav className={classes.drawer} aria-label=\"mailbox folders\">\n            {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n            <Hidden smUp implementation=\"css\">\n                <Drawer\n                    variant=\"temporary\"\n                    anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                    open={open}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                    ModalProps={{\n                        keepMounted: true, // Better open performance on mobile.\n                    }}\n                    onClose={onClose}>\n                    {drawer}\n                </Drawer>\n            </Hidden>\n\n            <Hidden xsDown implementation=\"css\">\n                <Drawer\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                    variant=\"temporary\"\n                    open={open}>\n                    {drawer}\n                </Drawer>\n            </Hidden>\n        </nav>\n    );\n};","import NavDrawer from './nav-drawer';\n\nexport default NavDrawer;","import React, { useCallback, useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles, Theme, createStyles, Typography, Link, IconButton } from '@material-ui/core';\nimport Header from '../header/Header';\nimport ILayout from './ILayout';\nimport routeService from '../.../../../services/route.service';\nimport { withRouter } from 'react-router-dom';\nimport ErrorAlert from '../error-alert/ErrorAlert';\nimport NavDrawer from '../nav-drawer';\n\nimport BookIcon from '@material-ui/icons/Book';\nimport AddAlarmIcon from '@material-ui/icons/AddAlarm';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\nimport Pages from '@material-ui/icons/Pages';\nimport { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex'\n    },\n    toolbar: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n    link: {\n      display: 'flex',\n    },\n    icon: {\n      marginRight: theme.spacing(0.5),\n      width: 20,\n      height: 20,\n    },\n    breadcrumb: {\n      marginBottom: 20\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: 'none',\n    },\n  })\n);\n\nexport default withRouter(function Layout({ errorMessage, routeInfo, children, hideNavDrawer = false, history }: any) {\n  const classes = useStyles();\n  const [navOpen, setNavOpen] = useState(false);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n\n      <ErrorAlert errorMessage={errorMessage} />\n\n      <Header toggleNavDrawer={() => { setNavOpen(navOpen => !navOpen) }} history={history} hideNavDrawer={hideNavDrawer} pageName={routeInfo.name} />\n\n      <NavDrawer open={navOpen} onClose={useCallback(() => setNavOpen(false), [])}>\n        <List>\n          <ListItem onClick={() => {\n            const notebooks = routeService.getRouteInfo('notebooks');\n            routeService.gotoUrl(`${notebooks.path}`);\n          }} button>\n            <ListItemIcon><BookIcon /></ListItemIcon>\n            <ListItemText primary={routeService.getRouteInfo('notebooks').name} />\n          </ListItem>\n          \n          <ListItem onClick={() => {\n             const recentlyRevisedPages = routeService.getRouteInfo('recentlyRevisedPages');\n             routeService.gotoUrl(`${recentlyRevisedPages.path}`);\n          }} button>\n            <ListItemIcon><WatchLaterIcon /></ListItemIcon>\n            <ListItemText primary={routeService.getRouteInfo('recentlyRevisedPages').name} />\n          </ListItem>\n\n          <ListItem onClick={() => {\n             const stats = routeService.getRouteInfo('stats');\n             routeService.gotoUrl(`${stats.path}`);\n          }} button>\n            <ListItemIcon><TimelineIcon /></ListItemIcon>\n            <ListItemText primary={routeService.getRouteInfo('stats').name} />\n          </ListItem>\n\n          <ListItem onClick={() => {\n             const customTimer = routeService.getRouteInfo('customTimer');\n             routeService.gotoUrl(`${customTimer.path}`);\n          }} button>\n            <ListItemIcon><AddAlarmIcon /></ListItemIcon>\n            <ListItemText primary={routeService.getRouteInfo('customTimer').name} />\n          </ListItem>\n        </List>\n      </NavDrawer>\n\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {children}\n      </main>\n    </div>\n  );\n});\n","import useAuth from \"../hooks/useAuth\";\nimport React from \"react\";\nimport mons from '../services/microsoft-one-note.service';\n\nexport default (Component: any) => (props: any) => {\n    const [isAuthenticated] = useAuth(props.history);\n    \n    if(!isAuthenticated){\n        mons.redirectUrl = props.match.url;\n        return null;\n    }else{\n        mons.redirectUrl = null;\n        return <Component {...props} />\n    }\n}","import authService from '../services/user.service';\nimport {routeConfig} from '../services/route.service';\nimport clientStorageService from '../services/client-side-data-storage.service';\nimport userService from '../services/user.service';\n\nexport default (history: any) => {\n    if(!userService.isLoggedIn()){\n        history.push(routeConfig.login.path);\n        return [false];\n    }\n\n    return [true];\n};","import React from 'react';\nimport { Typography } from '@material-ui/core';\n\nexport default ({variant}: any) => {\n    return <Typography variant={variant || 'h5'} component={variant || 'h5'} color=\"textSecondary\" gutterBottom>Nothing to display</Typography>\n};","import React from 'react';\nimport { Grid, Card, CardContent, Typography, makeStyles } from '@material-ui/core';\nimport Nothing from '../Nothing/Nothing';\n\nconst useStyles = makeStyles({\n    card: {\n        cursor: 'pointer'\n    }\n});\n\n\nexport default ({items, onClick, displayPropName, render = null, keyProp}: any) => {\n    const classes = useStyles();\n\n    if(!render){\n        render = (item: any) => {\n            return (\n                <Typography color=\"textSecondary\" gutterBottom>\n                    {item[displayPropName]}\n                </Typography>\n            );\n        }\n    }\n    \n    return (\n        items?.length > 0?\n        (<Grid spacing={5} container>\n            {\n                items.map((item: any) => {\n                    return (\n                        <Grid onClick={() => onClick(item)} xs={12} item md={6} key={item[keyProp]? item[keyProp]: item.id}>\n                            <Card className={classes.card} variant=\"outlined\">\n                                <CardContent>\n                                    {\n                                          render(item)   \n                                    }\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    );\n                })\n            }\n        </Grid>):\n        <Nothing></Nothing>\n    );\n}","import React from 'react';\nimport Layout from '../../components/layout/layout';\nimport { LinearProgress } from '@material-ui/core';\nimport useBooks from './useBooks';\nimport withAuth from '../../HOCs/withAuth';\nimport routerService from '../../services/route.service';\nimport CardList from '../../components/card-list/CardList';\n\nexport default withAuth((props: any) => {\n    const [noteBooks, errorMessage] = useBooks();\n\n    const viewSections = (noteBook: any) => {\n        routerService.goTo('sections', { id: noteBook.id });\n    };\n\n    const noteBooksGrid = (<CardList displayPropName='displayName' onClick={viewSections} items={noteBooks || []}></CardList>);\n\n    return (\n        <Layout \n            errorMessage={errorMessage} \n            hideNavDrawer={true} \n            routeInfo={routerService.getRouteInfo('notebooks')}>\n            {\n                !noteBooks ? (<LinearProgress color=\"secondary\" />) : noteBooksGrid\n            }\n        </Layout>\n    );\n});","import {useEffect, useState} from 'react';\nimport microsoftOneNoteService from '../../services/microsoft-one-note.service';\n\nexport default () => {\n    let [noteBooks, setNoteBooks] = useState(null);\n    let [errorMessage, setErrorMessage] = useState(null);\n\n    useEffect(() => {\n        microsoftOneNoteService.getAllNoteBooks().then((allBooks: any) => {\n            setNoteBooks(allBooks);\n        }).catch((error: any) => {\n            setErrorMessage(error);\n        });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return [noteBooks, errorMessage];\n};\n","import React, {useEffect, useState} from 'react';\nimport Layout from '../../components/layout/layout';\nimport { LinearProgress, TextField } from '@material-ui/core';\nimport withAuth from '../../HOCs/withAuth';\nimport useSections from './useSections';\nimport CardList from '../../components/card-list/CardList';\nimport {routerService, utilsService} from '../../services';\n\nexport default withAuth((props: any) => {\n    const [sections] = useSections(props.match.params.id);\n    const [filteredSections, setFilteredSections] = useState([]);\n\n    useEffect(() => {\n        setFilteredSections(sections);\n    }, [sections]);\n\n    function viewPages(section: any){\n        routerService.goTo('pages', {id: section.id});\n    }\n\n    const sectionsGrid = (\n        <>\n                  <TextField\n                        fullWidth\n                        autoComplete=\"off\"\n                        className=\"searchBox\"\n                        id=\"outlined-secondary\"\n                        label=\"Search Sections\"\n                        variant=\"outlined\"\n                        onChange={(event: any) => {\n                            const searchTxt = event.target.value.toLowerCase();\n                            \n                            const _filteredSections = sections.filter((section: any) => {\n                                const sectionName = section.displayName.toLowerCase();\n                                return utilsService.containsWord(sectionName, searchTxt);\n                            });\n\n                            setFilteredSections(_filteredSections);\n                        }}\n                    />\n                    \n                    <CardList displayPropName='displayName' onClick={viewPages} items={filteredSections || []}></CardList>\n        </>\n    );\n\n    return (\n        <Layout hideNavDrawer={true} routeInfo={routerService.getRouteInfo('sections')}>\n            <>\n                {\n                    sections?.length > 0 ? sectionsGrid:  (<LinearProgress color=\"secondary\" />)\n                }\n            </>\n        </Layout>\n    );\n});","import mons from '../../services/microsoft-one-note.service';\nimport {useState, useEffect} from 'react';\n\nexport default (notebookId: string)=> {\n    let [sections, useSections] = useState([]);\n\n    useEffect(() => {\n        mons.getAllSection(notebookId).then((sections: any) => {\n            useSections(sections);\n        });\n    }, [notebookId]);\n\n    return [sections];\n};","import {useEffect, useState} from 'react';\nimport mons from '../services/microsoft-one-note.service';\n\nexport default () => {\n    const [db, setDb]: [any, any] = useState();\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        mons.getAllDBRows().then((db: any) => {\n            setDb(db);\n        }).finally(()=> {\n            setLoading(false);\n        });\n    }, [setLoading]);\n\n    return [db, loading, setDb];\n};","class DateService{\n    static _instance: DateService;\n\n    diffBetweenDates(date1: string, date2: string){\n        const _date1: any = new Date(date1);\n        const _date2: any = new Date(date2);\n        const diffTime = Math.abs(_date2 - _date1);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \n        return diffDays;\n    }\n\n    diffFromToday(date: string){\n        const _date1: any = new Date(date);\n        const _date2: any = new Date();\n        const diffTime = Math.abs(_date2 - _date1);\n        const diffDays = Math.trunc(diffTime / (1000 * 60 * 60 * 24)); \n        return diffDays;\n    }\n\n    static getInstance(){\n        if(!DateService._instance){\n            DateService._instance = new DateService();\n        }\n\n        return DateService._instance;\n    }\n}\n\nexport default DateService.getInstance();","import dateService from './date.service';\nimport { Typography } from '@material-ui/core';\n\nclass Pages {\n    static _instance: Pages;\n\n    constructor() {\n\n    }\n\n    sortPages(pages: any){\n        pages.sort((page1: any, page2: any) => {\n            if(page1.sessions.length === 0 && page2.sessions.length > 0){\n                return 1;\n            }else if(page1.sessions.length > 0 && page2.sessions.length === 0){\n                return -1;\n            }else if(page1.sessions.length === 0 && page2.sessions.length === 0){\n                return 0;\n            }else{\n                const _date1: any = new Date(page1.sessions[0].startDate);\n                const _date2: any = new Date(page2.sessions[0].startDate);\n                return _date2 - _date1\n            }\n        });\n    }\n\n    getSessionsFromDB(db: any){\n        const pageTitleToSessions: any = {};\n\n        db.forEach((row: any) => {\n            if (!pageTitleToSessions[row.title]) {\n                pageTitleToSessions[row.title] = [];\n            }\n\n            pageTitleToSessions[row.title].push(row);\n        });\n\n        return pageTitleToSessions;\n    }\n\n    addSessionDiffFromToday(sessions: any){\n        return sessions.map((session: any) => {\n            session.daysDiffFromToday = dateService.diffFromToday(session.startDate);\n            return session;\n        });\n    }\n\n    mergeDBAndPageData(db: any, pages: any) {\n        const pageTitleToSessions: any = {};\n\n        db.forEach((row: any) => {\n            if (!pageTitleToSessions[row.title]) {\n                pageTitleToSessions[row.title] = [];\n            }\n\n            pageTitleToSessions[row.title].push(row);\n        });\n        \n        pages.forEach((page: any) => {\n            page.sessions = pageTitleToSessions[page.title] || [];\n            // Page details\n            this.addSessionDiffFromToday(page.sessions);\n        });\n\n        this.sortPages(pages);\n    }\n\n    static getInstance() {\n        if (!Pages._instance) {\n            Pages._instance = new Pages();\n        }\n\n        return Pages._instance;\n    }\n}\n\nexport default Pages.getInstance();","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport CardList from \"../card-list/CardList\";\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nexport default ({ viewPageInfo, filteredPages, keyProp }: any) => {\n    return (\n        <>\n            <CardList\n                onClick={viewPageInfo}\n                items={filteredPages}\n                keyProp={keyProp}\n                render={(item: any) => {\n                    return (\n                        <div key={item}>\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                {item.title}\n                            </Typography>\n\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                <span>{item.sectionName}</span>\n                            </Typography>\n\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                Last revisited:\n\n                                {item.sessions?.length > 0 ? item.sessions.map(({ daysDiffFromToday, startDate, startTime }: any, index: number) => {\n                                    return (<span key={`${startDate}*${startTime}`}> {daysDiffFromToday}{index !== item.sessions.length - 1 ? ', ' : ` day${daysDiffFromToday > 1 ? 's' : ''} ago`}</span>)\n                                }) : ' Never'}\n\n                                {\n                                    item.links ? <VisibilityIcon onClick={\n                                        (event) => {\n                                            event.stopPropagation();\n                                            const link = item.links?.oneNoteClientUrl?.href;\n                                            if(link){\n                                                window.location.href = link;\n                                            }\n                                        }\n                                    } style={{\n                                        float: 'right'\n                                    }}></VisibilityIcon> : null\n                                }\n                            </Typography>\n                        </div>\n                    );\n                }}>\n            </CardList>\n        </>\n    );\n};","import withAuth from \"../../HOCs/withAuth\";\nimport usePages from \"./usePages\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport { LinearProgress, TextField, Typography } from \"@material-ui/core\";\nimport routerService from '../../services/route.service';\nimport useDb from '../../hooks/useDB';\nimport pagesService from '../../services/pages.service';\nimport PageList from '../../components/pagesList/pagesList';\nimport utilsService from \"../../services/utils.service\";\n\nexport default withAuth((props: any) => {\n    const [pages, loading]: any[] = usePages(props.match.params.id);\n    const [filteredPages, setFilteredPages] = useState(pages);\n    const [db, dblLoading] = useDb();\n    const [sectionName, setSectionName] = useState();\n\n    const mergeDBAndPageData = useCallback(() => {\n        if (pages?.length > 0) {\n            setSectionName(pages[0].parentSection.displayName);\n        }\n        pagesService.mergeDBAndPageData(db, pages);\n        setFilteredPages(pages);\n    }, [db, pages]);\n\n    useEffect(() => {\n        if (db && pages) {\n            mergeDBAndPageData()\n        }\n    }, [db, mergeDBAndPageData, pages]);\n\n    function viewPageInfo(page: any) {\n        routerService.viewPageInfo(page);\n    }\n\n    const sectionsGrid = (\n        <>\n            <Typography variant=\"h4\" color=\"textSecondary\" gutterBottom>\n                {sectionName}\n            </Typography>\n\n            <TextField\n                fullWidth\n                autoComplete=\"off\"\n                className=\"searchBox\"\n                id=\"outlined-secondary\"\n                label=\"Search Pages\"\n                variant=\"outlined\"\n                onChange={(event: any) => {\n                    const searchTxt = event.target.value.toLowerCase();\n\n                    const _filteredPages = pages.filter((page: any) => {\n                        return utilsService.containsWord(page.title, searchTxt);\n                    });\n\n                    setFilteredPages(_filteredPages);\n                }}\n            />\n\n            <PageList viewPageInfo={viewPageInfo} filteredPages={filteredPages}></PageList>\n        </>\n    );\n\n    return (\n        <Layout hideNavDrawer={true} routeInfo={routerService.getRouteInfo('pages')}>\n            <>\n                {\n                    (loading || dblLoading) ? (<LinearProgress color=\"secondary\" />) : sectionsGrid\n                }\n            </>\n        </Layout>\n    );\n});","import {useState, useEffect} from 'react';\nimport mons from '../../services/microsoft-one-note.service';\n\nexport default (sectionId: string) => {\n    let [pages, setPages] = useState();\n    let [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        mons.getSectionPages(sectionId).then((pages: any) => {\n            setPages(pages);\n        }).finally(() => {\n            setLoading(false);\n        });\n    }, [sectionId]);\n\n    return [pages, loading];\n};","import React from \"react\";\nimport { Dialog, DialogTitle, DialogActions, Button } from \"@material-ui/core\";\n\nexport default ({open, onClose, onQuit, isRevision}: any) => {    \n    return (\n        <div>\n            <Dialog\n                open={open}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\">\n                <DialogTitle id=\"alert-dialog-title\">{`Are you sure you want to ${isRevision? 'stop': 'quit'}?`}</DialogTitle>\n\n                <DialogActions>\n                    <Button onClick={onClose} color=\"primary\">Close</Button>\n                    <Button onClick={onQuit} color=\"primary\" autoFocus>{isRevision? 'Stop': 'Quit'}</Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};","import React, { useState, useMemo, useCallback, useRef, useEffect } from 'react';\nimport Layout from '../../components/layout/layout';\nimport routerService from '../../services/route.service';\nimport { withStyles, Slider, Typography, Button, LinearProgress, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, makeStyles } from '@material-ui/core';\nimport mons from '../../services/microsoft-one-note.service';\nimport utilsService from \"../../services/utils.service\";\nimport QuitDialog from './QuitDialog';\nimport Paper from '@material-ui/core/Paper';\nimport './_timer.scss';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Nothing from '../../components/Nothing/Nothing';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  },\n});\n\nexport default (props: any) => {\n  let [sliderValue, setSliderValue] = useState(30);\n  let [isTicking, setTicking] = useState(false);\n  let [timeLeft, setTimeLeft] = useState('');\n  let [timeLeftPercent, setTimeLeftPercent] = useState(0);\n  let [openQuitDialog, setQuitDialog] = useState(false);\n  let [rows, setRows]: [any[], any] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [totalMinutes, setTotalMinutes] = useState(0);\n  const [totalStudyTime, setTotalStudyTime] = useState(0);\n  const [totalRevisionTime, setTotalRevisionTime] = useState(0);\n  const [revisionMode, setRevisionMode] = useState(false);\n  const [timeElapsedTxt, setTimeElapsedTxt] = useState('');\n\n  const startMillis = useRef(new Date());\n  const sliderValueRef = useRef(30);\n  const counterIntervalRef: any = useRef();\n  const pageDetails: any = useRef();\n  const revisionClicked = useRef(false);\n\n  const classes = useStyles();\n\n  const getAllDBRows = () => {\n    return mons.getAllDBRows().then((rows: any[]) => {\n      let _totalMinutes = 0;\n      let _totalStudyTime = 0;\n      let _totalRevisionTime = 0;\n      const _rows: any = [];\n  \n      rows.reverse().forEach(row => {\n        if (pageDetails?.current.title === row.title) {\n          _totalMinutes += row.minutesSpentLearning;\n\n          if(row.repetition){\n            _totalRevisionTime += row.minutesSpentLearning;\n          }else{\n            _totalStudyTime += row.minutesSpentLearning;\n          }\n\n          _rows.push(row);\n        }\n      });\n\n      setTotalMinutes(_totalMinutes);\n      setTotalStudyTime(_totalStudyTime);\n      setTotalRevisionTime(_totalRevisionTime);\n      setRows(_rows);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    const params = new URLSearchParams(props.location.search);\n    const pageUrl = params.get('pageUrl');\n    const pageTitle = params.get('pageTitle');\n\n    if (pageUrl) {\n      mons.getPage(pageUrl).then((_pageDetails: any) => {\n        const noteBook = decodeURI(_pageDetails.links.oneNoteClientUrl.href.split('Documents/')[1].split('/')[0]);\n        _pageDetails.noteBook = noteBook;\n        _pageDetails.isCustomTask = false;\n        pageDetails.current = _pageDetails;\n        return getAllDBRows();\n      });\n    }else if(pageTitle){\n      pageDetails.current = {\n        title: pageTitle,\n        id: 0,\n        isCustomTask: true\n      };\n      \n      getAllDBRows();\n    } else {\n      routerService.goTo(routerService.getHomeRoute()['name'].toLowerCase());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const PrettoSlider = withStyles({\n    root: {\n      color: 'rgb(246, 1, 87)',\n      height: 8,\n    },\n    thumb: {\n      height: 24,\n      width: 24,\n      backgroundColor: '#fff',\n      border: '2px solid currentColor',\n      marginTop: -8,\n      marginLeft: -12,\n      '&:focus,&:hover,&$active': {\n        boxShadow: 'inherit',\n      },\n    },\n    active: {},\n    valueLabel: {\n      left: 'calc(-50% + 4px)',\n    },\n    track: {\n      height: 8,\n      borderRadius: 4,\n    },\n    rail: {\n      height: 8,\n      borderRadius: 4,\n    },\n  })(Slider);\n\n  const getTimeLeftTxt = (totalMillis: number) => {\n    const millisElapsedSinceStart = Date.now() - startMillis.current.getTime();;\n    const millisLeft = totalMillis - millisElapsedSinceStart;\n    let totalSecondsLeft = millisLeft / (1000);\n    let minutesLeft = Math.trunc(totalSecondsLeft / 60);\n    let secondsLeft = Math.ceil(totalSecondsLeft - (minutesLeft * 60));\n    return `${minutesLeft} minutes and ${secondsLeft} seconds left`;\n  };\n\n  const getPercentTimeLeft = (totalMillis: number) => {\n    const millisElapsedSinceStart = Date.now() - startMillis.current.getTime();\n    const millisLeft = totalMillis - millisElapsedSinceStart;\n    return (millisLeft / totalMillis) * 100;\n  };\n\n  const getRowDetails = (totalMillisSpeantLeaning: number, totalMillis: number) => {\n    const startDate = `${startMillis.current.getMonth() + 1}/${startMillis.current.getDate()}/${startMillis.current.getFullYear()}`;\n    const startTime = `${startMillis.current.getHours()}:${startMillis.current.getMinutes()}:${startMillis.current.getSeconds()}`;\n    const params = new URLSearchParams(props.location.search);\n\n    return {\n      startDate,\n      startTime,\n      title: pageDetails.current.title,\n      totalSessionMinutes: totalMillis / (60000),\n      minutesSpentLearning: totalMillisSpeantLeaning / (60000),\n      repetition: false,\n      pageId: pageDetails.current.id,\n      sectionName: pageDetails.current.parentSection?.displayName || params.get('sectionName'),\n      sectionId: pageDetails.current.parentSection?.id || params.get('sectionId'),\n      noteBook: pageDetails.current.noteBook || params.get('noteBook'),\n      isCustomTask: pageDetails.current.isCustomTask\n    };\n  };\n\n  const stopTimer = useCallback(() => {\n    const totalMillis = sliderValueRef.current * 60 * 1000;\n    const totalMillisSpeantLeaning = (Date.now() - startMillis.current.getTime());\n    const rowDetails = getRowDetails(totalMillisSpeantLeaning, totalMillis);\n\n    // Update one note page which tracks learning\n    mons.updateOneNoteDB(rowDetails).then(() => {\n      setRows((rows: any) => [{ ...rowDetails, repetition: false }, ...rows]);\n    });\n\n    clearInterval(counterIntervalRef.current);\n    setTicking(false);\n    utilsService.playNotificatiomSound();\n    // Store time spent studying \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const startTimer = useCallback(() => {\n    // Start timer \n    const totalMillis = sliderValueRef.current * 60 * 1000;\n    startMillis.current = new Date();\n\n    setTimeLeft(getTimeLeftTxt(totalMillis));\n    setTimeLeftPercent(getPercentTimeLeft(totalMillis));\n\n    counterIntervalRef.current = setInterval(() => {\n      setTimeLeft(getTimeLeftTxt(totalMillis));\n      setTimeLeftPercent(getPercentTimeLeft(totalMillis));\n\n      const millisElapsedSinceStart = Date.now() - startMillis.current.getTime();\n\n      if (millisElapsedSinceStart >= totalMillis) {\n        stopTimer();\n      }\n    }, 1000);\n\n    setTicking(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const studyHistory = (\n    rows.length > 0 ?\n      (\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\"></TableCell>\n                <TableCell align=\"center\">Date</TableCell>\n                <TableCell align=\"center\">Time</TableCell>\n                <TableCell align=\"center\">Minutes spent</TableCell>\n                <TableCell align=\"center\">Total session minutes</TableCell>\n                <TableCell align=\"center\">Repetition</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row, index) => (\n                <TableRow style={row.minutesSpentLearning < row.totalSessionMinutes ? { backgroundColor: '#faa1be', opacity: 0.8 } : { position: 'static' }} key={index}>\n                  <TableCell align=\"center\">{index + 1}</TableCell>\n                  <TableCell align=\"center\">{row.startDate}</TableCell>\n                  <TableCell align=\"center\">{row.startTime}</TableCell>\n                  <TableCell align=\"center\">{utilsService.round(row.minutesSpentLearning)}</TableCell>\n                  <TableCell align=\"center\">{utilsService.round(row.totalSessionMinutes)}</TableCell>\n                  <TableCell align=\"center\">{row.repetition? 'Yes': 'No'}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      ) : <Nothing></Nothing>\n  );\n\n  const toggleRevisionMode = (name: any) => (event: any) => {\n    if (isTicking) {\n      revisionClicked.current = true;\n      setQuitDialog(true)\n    } else {\n      setRevisionMode(isRevisionMode => !isRevisionMode);\n    }\n  };\n\n  const getRevisionTime = () => {\n    const seconds = Math.trunc((Date.now() - startMillis.current.getTime()) / 1000);\n    const minutes = Math.trunc(seconds / 60);\n    return {\n      minutes,\n      seconds\n    };\n  };\n\n  const getTimeElapsedTxt = () => {\n    const time = getRevisionTime();\n    return `Time Elapsed - ${time.minutes > 0 ? time.minutes + \" minutes and \" : ''}${time.seconds % 60} seconds`;\n  };\n\n  const checkAndSetRevisionMode = () => {\n    if (!revisionMode) {\n      // Revision started\n      revisionClicked.current = false;\n      setRevisionMode(true);\n\n      if (isTicking) {\n        stopTimer();\n      }\n    } else {\n      // Revision Ended\n      clearInterval(counterIntervalRef.current);\n      const revisionTime = getRevisionTime();\n      const totalMillisSpeantLeaning = (revisionTime.seconds * 1000);\n      const rowDetails = getRowDetails(totalMillisSpeantLeaning, totalMillisSpeantLeaning);\n      rowDetails.repetition = true;\n\n      // Update one note page which tracks learning\n      mons.updateOneNoteDB(rowDetails).then(() => {\n        setRows((rows: any) => [{ ...rowDetails, repetition: true }, ...rows]);\n      });\n    }\n  };\n\n  const revisionSwitch = (\n    <>\n      <FormControl className=\"revision-switch\" component=\"fieldset\">\n        <FormGroup>\n          <FormControlLabel\n            control={<Switch checked={revisionMode} onChange={toggleRevisionMode('revisionMode')} value=\"gilad\" />}\n            label=\"Revision Mode\" />\n        </FormGroup>\n      </FormControl>\n      <br />\n    </>\n  );\n\n  const studyModeHeader = (\n    !isTicking ?\n      <Typography variant=\"h5\" component=\"h6\" gutterBottom>Study {pageDetails.current && `\"${pageDetails.current.title}\"`} for {sliderValue} Minutes</Typography> :\n      <Typography variant=\"h5\" component=\"h6\" gutterBottom>{pageDetails.current && `\"${pageDetails.current.title}\"`}: {timeLeft}</Typography>\n  );\n\n  const studyModeSlider = useMemo(() => (\n    <>\n      <div style={{\n        minHeight: '45px',\n        paddingTop: isTicking ? '15px' : '0px',\n        paddingBottom: isTicking ? '15px' : '0px'\n      }}>\n        {\n          !isTicking ? <PrettoSlider\n            onChange={(event, value) => {\n              sliderValueRef.current = Number(value);\n              setSliderValue(sliderValueRef.current);\n            }}\n            valueLabelDisplay=\"auto\"\n            aria-label=\"pretto slider\"\n            min={1}\n            step={1}\n            max={90}\n            defaultValue={sliderValueRef.current} /> :\n            <LinearProgress\n              variant=\"buffer\"\n              value={100 - timeLeftPercent}\n              valueBuffer={0}\n              color=\"secondary\"\n            />\n        }\n      </div>\n    </>\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  ), [isTicking, rows, timeLeftPercent]);\n\n  const checkAndStartTimer = () => {\n    if (revisionMode) {\n      startMillis.current = new Date();\n\n      counterIntervalRef.current = setInterval(() => {\n        setTimeElapsedTxt(getTimeElapsedTxt());\n      }, 1000);\n    } else {\n      startTimer();\n    }\n    setTicking(true);\n  };\n\n  const timerButtons = (\n    !isTicking ?\n      (<Button onClick={() => { checkAndStartTimer() }} variant=\"contained\" color=\"primary\">Start</Button>) :\n      (<Button onClick={() => {\n        setQuitDialog(true)\n      }} variant=\"contained\" color=\"primary\">{revisionMode ? 'Stop' : 'Quit'}</Button>)\n  );\n\n  const revisionModeHeader = (\n    <>\n      <Typography className=\"revision-mode-header\" variant=\"h5\" component=\"h6\" gutterBottom>\n        {pageDetails.current && pageDetails.current.title}{isTicking? `, ${timeElapsedTxt}`: null}</Typography>\n    </>\n  );\n\n  const onQuit = () => {\n    if (revisionClicked.current || revisionMode) {\n      checkAndSetRevisionMode();\n    } else {\n      stopTimer();\n    }\n    setQuitDialog(false);\n    setTicking(false);\n  };\n\n  return (\n    <>\n      <Layout hideNavDrawer={true} routeInfo={routerService.getRouteInfo('timer')}>\n        {/*Quit Dialog*/}\n        <QuitDialog open={openQuitDialog} onClose={() => {\n          revisionClicked.current = false;\n          setQuitDialog(false)\n        }} onQuit={onQuit} isRevision={revisionMode}></QuitDialog>\n\n        {revisionSwitch}\n        {!revisionMode ? studyModeHeader : null}\n        {revisionMode ? null : studyModeSlider}\n        {revisionMode ? revisionModeHeader : null}\n        {timerButtons}\n\n        <div className=\"table-cntr\">\n          <Typography variant=\"h5\" component=\"h6\" gutterBottom>\n            Learning history{totalMinutes ? `: ${Math.ceil(totalMinutes)} minutes spent learning (Study - ${utilsService.round(Math.ceil(totalStudyTime)/60)} hours, Revision - ${utilsService.round(Math.ceil(totalRevisionTime)/60)} hours, Total - ${utilsService.round(Math.ceil(totalMinutes)/60)} hours)` : null}\n          </Typography>\n          {\n            loading ? <LinearProgress color=\"secondary\" /> : studyHistory\n          }\n        </div>\n      </Layout>\n    </>\n  );\n}; ","import React, { useEffect, useState } from 'react';\nimport withAuth from '../../HOCs/withAuth';\nimport './_pages.module.scss';\nimport Layout from '../../components/layout/layout';\nimport routerService from '../../services/route.service';\nimport useDb from '../../hooks/useDB';\nimport { LinearProgress, TextField } from '@material-ui/core';\nimport pagesService from '../../services/pages.service';\nimport PageList from '../../components/pagesList/pagesList';\nimport utilsService from '../../services/utils.service';\n\nexport default withAuth((props: any) => {\n    const [db, loading, setDb] = useDb();\n    const [filteredPages, setFilteredPages]: [any, any] = useState([]);\n\n    useEffect(() => {\n        if (db?.length > 0 && !db[0].sessions) {\n            const pageSessions = pagesService.getSessionsFromDB(db);\n   \n            const pages = Object.entries(pageSessions).map(([, sessions]: any) => {\n                return {\n                    ...sessions[0],\n                    sessions: pagesService.addSessionDiffFromToday(sessions)\n                }\n            });\n\n            pagesService.sortPages(pages);\n            \n            setDb(pages);\n            setFilteredPages(pages);\n        }\n    }, [db, setDb]);\n\n    const viewPageInfo = (page: any) => {\n        routerService.viewPageInfo(page);\n    };\n\n    const allPages = (\n        <>\n            <TextField\n                fullWidth\n                autoComplete=\"off\"\n                className=\"searchBox\"\n                id=\"outlined-secondary\"\n                label=\"Search Pages\"\n                variant=\"outlined\"\n                onChange={(event: any) => {\n                    const searchTxt = event.target.value.toLowerCase();\n\n                    const _filteredPages = db.filter((page: any) => {\n                        const pageTitle = page.title.toLowerCase();\n                        const sectionName = page.sectionName.toLowerCase();\n                        const sessions = page.sessions;\n                        return utilsService.containsWord(pageTitle, searchTxt) || utilsService.containsWord(sectionName, searchTxt) || sessions.find((section: any) => section.daysDiffFromToday === Number(searchTxt))\n                    });\n\n                    setFilteredPages(_filteredPages);\n                }}\n            />\n\n            <PageList viewPageInfo={viewPageInfo} keyProp='title' filteredPages={filteredPages}></PageList>\n        </>\n    );\n\n    return (\n        <>\n            <Layout\n                hideNavDrawer={true}\n                routeInfo={routerService.getRouteInfo('recentlyRevisedPages')}>\n                {\n                    loading ? (<LinearProgress color=\"secondary\" />) : allPages\n                }\n            </Layout>\n        </>\n    );\n});","import utilsService from '../../services/utils.service';\n\nclass StatsService {\n    static _instance: StatsService;\n\n    formatData(db: any) {\n        const dbDateMap: any = {};\n\n        db.forEach((row: any) => {\n            const startDate = this.formatDate(row.startDate);\n            dbDateMap[startDate] = dbDateMap[startDate] || { totalTimeSpent: 0, date: startDate, pages: {} };\n            row.minutesSpentLearning = utilsService.round(row.minutesSpentLearning);\n            row.hoursSpentLearning = utilsService.round(row.minutesSpentLearning / 60);\n            dbDateMap[startDate].totalTimeSpent += row.minutesSpentLearning;\n            dbDateMap[startDate].totalTimeSpentHours = utilsService.round(dbDateMap[startDate].totalTimeSpent / 60);\n            dbDateMap[startDate].pages[row.title] = dbDateMap[startDate].pages[row.title] || { stats: { minutesSpentLearning: 0, hoursSpentLearning: 0 }, sessions: [] };\n            dbDateMap[startDate].pages[row.title].stats.minutesSpentLearning += row.minutesSpentLearning;\n            dbDateMap[startDate].pages[row.title].stats.hoursSpentLearning += row.hoursSpentLearning;\n            dbDateMap[startDate].pages[row.title].sessions.push(row);\n        });\n\n        let rows = Object.keys(dbDateMap).map(date => dbDateMap[date]);\n        rows.forEach(row => {\n            row.totalTimeSpent = utilsService.round(row.totalTimeSpent);\n            let pages = row.pages;\n            row.pages = [];\n            Object.keys(pages).forEach(title => {\n                pages[title].title = title;\n                pages[title].stats.minutesSpentLearning = utilsService.round(pages[title].stats.minutesSpentLearning);\n                pages[title].stats.hoursSpentLearning = utilsService.round(pages[title].stats.hoursSpentLearning);\n                row.pages.push(pages[title])\n            });\n        });\n\n        return rows.reverse();\n    }\n\n    getTotalAndAverageTime(rows: any) {\n        const totalTime = utilsService.round(rows.reduce((sum: any, row: any) => row.totalTimeSpentHours + sum, 0));\n        const averageTime = utilsService.round(totalTime / rows.length);\n        return { totalTime, averageTime };\n    }\n\n    formatDate(date: string) {\n        //  date is assumed to be in mm/dd/yyyy format\n        const dtArr = date.split('/');\n        const month = dtArr[0];\n        dtArr[0] = dtArr[1];\n        dtArr[1] = month;\n        return dtArr.join('/');\n    }\n\n\n\n    static getInstance() {\n        if (!StatsService._instance) {\n            StatsService._instance = new StatsService();\n        }\n\n        return StatsService._instance;\n    }\n}\n\nexport default StatsService.getInstance();","import React, { useEffect } from 'react';\nimport useDb from '../../hooks/useDB';\nimport { LinearProgress } from '@material-ui/core';\nimport statsService from './statsService';\n\nexport const StatsContext: any = React.createContext({});\n\nexport default (props: any) => {\n    const [db, dbLoading] = useDb();\n    const rows = db && statsService.formatData(db);\n    const stats = db && statsService.getTotalAndAverageTime(rows)\n\n    return (\n        <StatsContext.Provider value={{rows, stats}}>\n            {\n                dbLoading ? (<LinearProgress color=\"secondary\" />) : props.children\n            }\n        </StatsContext.Provider>\n    );\n};","import React, {useEffect} from 'react';\nimport {select} from 'd3-selection';\n\nexport default () => {\n    useEffect(() => {\n        console.log(select('.chart-container'));\n    }, []);\n\n    return (\n        <div className=\"chart-container\">\n        </div>\n    );\n};","import React, { useContext, useState } from 'react';\nimport Layout from '../../components/layout/layout';\nimport { routerService } from '../../services';\nimport StatsProvider from './statsProvider';\nimport { StatsContext } from './statsProvider';\nimport { TableContainer, Table, makeStyles, TableHead, TableRow, TableCell, TableBody, Typography, TablePagination } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Charts from './Charts';\nimport Nothing from '../../components/Nothing/Nothing';\nimport './_stats.module.scss';\n\nconst TableComponent = () => {\n    const useStyles = makeStyles({\n        table: {\n            minWidth: 650\n        },\n    });\n\n    const classes = useStyles();\n\n    const { rows, stats }: any = useContext(StatsContext);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const [currentPage, setCurrentPage] = useState(0);\n\n\n    const viewPageInfo = (page: any) => {\n        routerService.viewPageInfo(page);\n    };\n\n    return (\n        <>\n            <Typography variant=\"h5\" component=\"h5\" gutterBottom>Total time: {stats.totalTime} hours, Average time: {stats.averageTime} hours per day</Typography>\n\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"center\">Date</TableCell>\n                            <TableCell align=\"center\">Time Spent (Minutes, Hours)</TableCell>\n                            <TableCell align=\"center\">Pages (Minutes, Hours)</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.slice(currentPage * rowsPerPage, (currentPage * rowsPerPage) + rowsPerPage).map((row: any, index: number) => (\n                            <TableRow key={index}>\n                                <TableCell align=\"center\">{row.date}</TableCell>\n                                <TableCell align=\"center\">{row.totalTimeSpent}, {row.totalTimeSpentHours}</TableCell>\n                                <TableCell align=\"center\">{\n                                    row.pages.map((page: any, index: number) => {\n                                        return (\n                                            <p onClick={() => viewPageInfo(page.sessions[0])} key={index}>\n                                                {page.title} ({page.stats.minutesSpentLearning}, {page.stats.hoursSpentLearning})\n                                            </p>\n                                        )\n                                    })\n                                }</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25, 50, 100]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={currentPage}\n                    onChangePage={(event, newPage) => setCurrentPage(newPage)}\n                    onChangeRowsPerPage={(event) => setRowsPerPage(parseInt(event.target.value, 10))}\n                />\n            </TableContainer>\n        </>\n    );\n};\n\nconst StatsComponent = () => {\n    const { rows }: any = useContext(StatsContext);\n    const Component = (\n        <>\n            <Charts></Charts>\n            <TableComponent></TableComponent>\n        </>\n    );\n\n    return (\n        <>\n            {rows?.length > 0? Component: <Nothing></Nothing>} \n        </>\n    );\n};\n\nexport default () => {\n    return (\n        <Layout hideNavDrawer={true} routeInfo={routerService.getRouteInfo('stats')}>\n            <StatsProvider>\n                <StatsComponent></StatsComponent>\n            </StatsProvider>\n        </Layout>\n    );\n};","import * as actions from './actions';\n\nconst custom = { displayName: 'Custom', id: 0 };\nexport const initialState = {notebooks: null, sections: null, selectedNotebook: {}, taskName: '', selectedSection: {}, custom};\n\nfunction reducer(state=initialState, action){\n    switch(action.type){\n        case actions.SET_NOTEBOOKS: return {...state, notebooks: action.notebooks};\n        case actions.SET_SECTIONS: return {...state, sections: action.sections};\n        case actions.SELECT_NOTEBOOK: return {...state, selectedNotebook: action.selectedNotebook};\n        case actions.UPDATE_TASK_NAME: return {...state, taskName: action.taskName};\n        case actions.LOAD_SECTIONS: return {...state};\n        case actions.SELECT_SECTION: return {...state, selectedSection: action.selectedSection};\n        case actions.SET_LOADING_SECTIONS: return {...state, loadingSections: action.value};\n        default: return state;\n    }\n}\n\nexport default reducer;","export const UPDATE_TASK_NAME = 'UPDATE_TASK_NAME';\nexport const ADD_NEW_TASK = 'ADD_NEW_TASK';\nexport const SET_NOTEBOOKS = 'ADD_NOTEBOOKS'\nexport const SET_SECTIONS = 'LOAD_SECTIONS';\nexport const SELECT_NOTEBOOK = 'SELECT_NOTEBOOK';\nexport const LOAD_SECTIONS = 'LOAD_SECTIONS'\nexport const SELECT_SECTION = 'SELECT_SECTION';\nexport const SET_LOADING_SECTIONS = 'SET_LOADING_SECTIONS';","import React from 'react';\nimport useData from './useData';\nimport { LinearProgress } from '@material-ui/core';\nimport mons from '../../../services/microsoft-one-note.service';\nimport * as actions from './state/actions';\nexport const TaskNameContext = React.createContext({});\n\nexport default ({ children }: any) => {\n    const [state, dispatch]: any = useData();\n\n    const loadSections = (notebookId: string) => {\n        dispatch({type: actions.SET_LOADING_SECTIONS, value: true})\n\n        mons.getAllSection(notebookId).then((sections: any) => {\n            dispatch({type: actions.SET_SECTIONS, sections: [...sections, state.custom]})\n            dispatch({type: actions.SET_LOADING_SECTIONS, value: false})\n            dispatch({type: actions.SELECT_SECTION, selectedSection: sections[0]})\n        });\n    };\n\n    const props = {\n        loadSections\n    };\n\n    return (<>\n        <TaskNameContext.Provider value={{...state, ...props, dispatch}}>\n            {\n                !state?.notebooks || !state?.sections ? (<LinearProgress color=\"secondary\" />) : children\n            }\n        </TaskNameContext.Provider>\n    </>);\n};","import { useEffect, useReducer } from 'react';\nimport mons from '../../../services/microsoft-one-note.service';\nimport * as actions from './state/actions';\nimport reducer, {initialState} from './state/reducer';\n\nexport default () => {\n    let [state, dispatch] = useReducer(reducer, initialState)\n\n    useEffect(() => {\n        mons.getAllNoteBooks().then(notebooks => {\n            notebooks.push(state.custom);\n            dispatch({type: actions.SET_NOTEBOOKS, notebooks});\n            dispatch({type: actions.SET_SECTIONS, sections: [state.custom]});\n            dispatch({type: actions.SELECT_NOTEBOOK, selectedNotebook: state.custom});\n            dispatch({type: actions.SELECT_SECTION, selectedSection: state.custom});\n        });\n    }, [state.custom]);\n\n    return [state, dispatch];\n};","import React, { useContext } from 'react';\nimport { Select, MenuItem, Typography } from '@material-ui/core';\nimport { TaskNameContext } from '../TaskNameProvider';\nimport classes from '../_taskNameInput.module.scss';\nimport * as actions from '../state/actions';\n\nconst NotebookSelectBox = () => {\n    const taskNameContext: any = useContext(TaskNameContext);\n    const { notebooks, custom, dispatch } = taskNameContext;\n\n    return (\n        <>\n            <Typography color=\"textSecondary\" gutterBottom>\n                Notebook:\n            </Typography>\n\n            <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={taskNameContext.selectedNotebook|| {}}\n                className={classes.selectBox}\n                onChange={(event) => {\n                    let selectedNotebook: any = event.target.value;\n                    taskNameContext.dispatch({ type: actions.SELECT_NOTEBOOK, selectedNotebook })\n                    \n                    if(selectedNotebook === custom){\n                        dispatch({type: actions.SET_SECTIONS, sections: [custom]})\n                        dispatch({type: actions.SELECT_SECTION, selectedSection:custom})\n                    }else{\n                        taskNameContext.loadSections(selectedNotebook.id);\n                    }\n                }}>\n                {\n                    notebooks?.map((notebook: any) => {\n                        return (\n                            <MenuItem key={notebook.id} value={notebook}>{notebook.displayName}</MenuItem>\n                        );\n                    })\n                }\n            </Select>\n        </>\n    );\n};\n\nexport default NotebookSelectBox;","import React, { useContext } from 'react';\nimport { Select, MenuItem, Typography, LinearProgress } from '@material-ui/core';\nimport { TaskNameContext } from '../TaskNameProvider';\nimport classes from '../_taskNameInput.module.scss';\nimport * as actions from '../state/actions';\n\nconst SectionSelectBox = () => {\n    const taskNameContext: any = useContext(TaskNameContext);\n    const { sections, loadingSections } = taskNameContext;\n\n    const SectionSelection = (\n        <>\n            <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                className={classes.selectBox}\n                value={taskNameContext.selectedSection || {}}\n                onChange={(event) => {\n                    let selectedSection = event.target.value;\n                    taskNameContext.dispatch({ type: actions.SELECT_SECTION, selectedSection })\n                }}>\n                {\n                    sections?.map((section: any) => {\n                        return (\n                            <MenuItem key={section.id} value={section}>{section.displayName}</MenuItem>\n                        );\n                    })\n                }\n            </Select>\n        </>\n    );\n\n    return (\n        <>\n            <Typography color=\"textSecondary\" gutterBottom>\n                Sections:\n            </Typography>\n\n            {loadingSections ? (<LinearProgress color=\"secondary\" />) : SectionSelection}\n        </>\n    );\n};\n\nexport default SectionSelectBox;","\nimport React, {useContext} from 'react';\nimport { TextField, Button, Grid } from '@material-ui/core';\nimport TaskNameProvider, {TaskNameContext} from  './TaskNameProvider';\nimport * as actions from './state/actions';\n\nimport classes from './_taskNameInput.module.scss';\nimport NotebookSelectBox from './NotebookSelectBox/NotebookSelectBox';\nimport SectionSelectBox from './SectionSelectBox/SectionSelectBox';\nimport { routerService } from '../../../services';\n\nconst TaskNameInput = ({ notebooks }: any) => {\n    const taskNameContext: any = useContext(TaskNameContext);\n    const {loadingSections, taskName, selectedSection, selectedNotebook} = taskNameContext;\n    const timerUrl = routerService.getRouteUrl('timer');\n\n    const viewPageInfo = () => {\n        let search = `?pageTitle=${encodeURIComponent(taskName)}&sectionId=${selectedSection.id}&sectionName=${selectedSection.displayName}&noteBook=${selectedNotebook.displayName}`;\n        routerService.gotoUrl(`${timerUrl}${search}`);\n    }\n\n    return (\n        <>\n            <div className={classes.selectBoxCntr}>\n                <Grid className={classes.selectBoxGrid} item xs={12} md={6}>\n                    <NotebookSelectBox></NotebookSelectBox>\n                </Grid>\n\n                <Grid className={classes.selectBoxGrid} item xs={12} md={6}>\n                    <SectionSelectBox></SectionSelectBox>\n                </Grid>\n            </div>\n\n            <TextField\n                fullWidth\n                autoComplete=\"off\"\n                className={`${classes.taskInput} searchBox`}\n                id=\"outlined-secondary\"\n                label=\"Task Name\"\n                variant=\"outlined\"\n                onChange={(event: any) => {\n                    const searchTxt = event.target.value.trim();\n                    taskNameContext.dispatch({type: actions.UPDATE_TASK_NAME, taskName: searchTxt});\n                }}\n            />\n\n            <Button disabled={loadingSections || !taskName} onClick={() => { viewPageInfo() }} variant=\"contained\" color=\"primary\">Add</Button>\n        </>\n    );\n};\n\nexport default () => {\n    return (\n        <>\n            <TaskNameProvider>\n                <TaskNameInput></TaskNameInput>\n            </TaskNameProvider>\n        </>\n    );\n};","import Notebooks from './Notebooks/Notebooks';\nimport Login from './Login/Login';\nimport Sections from './Sections/Sections';\nimport Pages from './Pages/Pages';\nimport Timer from './Timer/Timer';\nimport RecentlyRevisedPages from './RecentlyRevisedPages/Pages';\nimport Stats from './Stats/Stats';\nimport CustomTimer from './CustomTimer/CustomTimer';\n\nexport default {\n    Login,\n    Notebooks,\n    Sections,\n    Pages,\n    Timer,\n    RecentlyRevisedPages,\n    Stats,\n    CustomTimer\n};","import React, { useLayoutEffect } from 'react';\nimport Layout from '../../components/layout/layout';\nimport { routeConfig } from '../../services/config';\nimport mons from '../../services/microsoft-one-note.service';\nimport { routerService, userService } from '../../services';\nimport './login.scss';\n\n\nexport default (props: any) => {\n    useLayoutEffect(() => {\n        if (userService.isLoggedIn()) {\n            routerService.goTo('notebooks');\n        }\n    }, [props.history]);\n\n    function onSignInSuccess() {\n        routerService.goTo('notebooks');\n        // props.history.push(routeConfig.notebooks.path)\n    }\n\n    return (\n        <>\n            <Layout hideNavDrawer={true} routeInfo={routerService.getRouteInfo('login')}>\n                <div className=\"msal-login-btn\" onClick={() => mons.onSignIn().then(onSignInSuccess)}>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"215\" height=\"41\" viewBox=\"0 0 215 41\"><title>MS-SymbolLockup</title><rect width=\"215\" height=\"41\" fill=\"#fff\"/><path d=\"M214,1V40H1V1H214m1-1H0V41H215V0Z\" fill=\"#8c8c8c\"/><path d=\"M45.812,25.082V23.288a2.849,2.849,0,0,0,.576.4,4.5,4.5,0,0,0,.707.3,5.513,5.513,0,0,0,.747.187,3.965,3.965,0,0,0,.688.065,2.937,2.937,0,0,0,1.637-.365,1.2,1.2,0,0,0,.538-1.062,1.16,1.16,0,0,0-.179-.649,1.928,1.928,0,0,0-.5-.5,5.355,5.355,0,0,0-.757-.435q-.437-.209-.935-.436c-.356-.19-.687-.383-1-.578a4.358,4.358,0,0,1-.8-.648,2.728,2.728,0,0,1-.534-.8,2.6,2.6,0,0,1-.194-1.047,2.416,2.416,0,0,1,.333-1.285,2.811,2.811,0,0,1,.879-.9,4.026,4.026,0,0,1,1.242-.528,5.922,5.922,0,0,1,1.42-.172,5.715,5.715,0,0,1,2.4.374v1.721a3.832,3.832,0,0,0-2.3-.645,4.106,4.106,0,0,0-.773.074,2.348,2.348,0,0,0-.689.241,1.5,1.5,0,0,0-.494.433,1.054,1.054,0,0,0-.19.637,1.211,1.211,0,0,0,.146.608,1.551,1.551,0,0,0,.429.468,4.276,4.276,0,0,0,.688.414c.271.134.584.28.942.436q.547.285,1.036.6a4.881,4.881,0,0,1,.856.7,3.015,3.015,0,0,1,.586.846,2.464,2.464,0,0,1,.217,1.058,2.635,2.635,0,0,1-.322,1.348,2.608,2.608,0,0,1-.868.892,3.82,3.82,0,0,1-1.257.5,6.988,6.988,0,0,1-1.5.155c-.176,0-.392-.014-.649-.04s-.518-.067-.787-.117a7.772,7.772,0,0,1-.761-.187A2.4,2.4,0,0,1,45.812,25.082Z\" fill=\"#5e5e5e\"/><path d=\"M55.129,16.426a1.02,1.02,0,0,1-.714-.272.89.89,0,0,1-.3-.688.916.916,0,0,1,.3-.7,1.008,1.008,0,0,1,.714-.278,1.039,1.039,0,0,1,.732.278.909.909,0,0,1,.3.7.9.9,0,0,1-.3.678A1.034,1.034,0,0,1,55.129,16.426Zm.842,9.074h-1.7V18h1.7Z\" fill=\"#5e5e5e\"/><path d=\"M65.017,24.9q0,4.131-4.153,4.131a6.187,6.187,0,0,1-2.556-.491V26.986a4.726,4.726,0,0,0,2.337.7,2.342,2.342,0,0,0,2.672-2.628V24.24h-.029a2.947,2.947,0,0,1-4.742.436,4.041,4.041,0,0,1-.838-2.684,4.738,4.738,0,0,1,.9-3.04,3,3,0,0,1,2.476-1.128,2.384,2.384,0,0,1,2.2,1.216h.029V18h1.7Zm-1.684-2.835v-.973a1.91,1.91,0,0,0-.524-1.352A1.718,1.718,0,0,0,61.5,19.18a1.793,1.793,0,0,0-1.512.714,3.217,3.217,0,0,0-.546,2,2.774,2.774,0,0,0,.524,1.769,1.678,1.678,0,0,0,1.387.662,1.805,1.805,0,0,0,1.429-.632A2.391,2.391,0,0,0,63.333,22.064Z\" fill=\"#5e5e5e\"/><path d=\"M73.908,25.5h-1.7V21.273q0-2.1-1.486-2.1a1.622,1.622,0,0,0-1.282.582,2.162,2.162,0,0,0-.5,1.469V25.5H67.229V18h1.707v1.245h.029A2.673,2.673,0,0,1,71.4,17.824a2.265,2.265,0,0,1,1.868.795,3.57,3.57,0,0,1,.644,2.3Z\" fill=\"#5e5e5e\"/><path d=\"M80.962,16.426a1.02,1.02,0,0,1-.714-.272.89.89,0,0,1-.3-.688.916.916,0,0,1,.3-.7,1.008,1.008,0,0,1,.714-.278,1.039,1.039,0,0,1,.732.278.909.909,0,0,1,.3.7.9.9,0,0,1-.3.678A1.034,1.034,0,0,1,80.962,16.426ZM81.8,25.5H80.1V18h1.7Z\" fill=\"#5e5e5e\"/><path d=\"M90.7,25.5H89V21.273q0-2.1-1.486-2.1a1.622,1.622,0,0,0-1.282.582,2.157,2.157,0,0,0-.506,1.469V25.5H84.023V18H85.73v1.245h.03a2.673,2.673,0,0,1,2.431-1.421,2.265,2.265,0,0,1,1.868.795,3.57,3.57,0,0,1,.644,2.3Z\" fill=\"#5e5e5e\"/><path d=\"M106.984,18l-2.212,7.5h-1.78l-1.361-5.083a3.215,3.215,0,0,1-.1-.659H101.5a3.069,3.069,0,0,1-.131.644l-1.48,5.1H98.145L95.939,18H97.7l1.363,5.405a3.16,3.16,0,0,1,.087.645H99.2a3.384,3.384,0,0,1,.117-.659L100.832,18h1.6l1.347,5.428a3.732,3.732,0,0,1,.095.644h.052a3.387,3.387,0,0,1,.11-.644L105.365,18Z\" fill=\"#5e5e5e\"/><path d=\"M109.1,16.426a1.018,1.018,0,0,1-.714-.272.886.886,0,0,1-.3-.688.912.912,0,0,1,.3-.7,1.006,1.006,0,0,1,.714-.278,1.039,1.039,0,0,1,.732.278.912.912,0,0,1,.3.7.9.9,0,0,1-.3.678A1.034,1.034,0,0,1,109.1,16.426Zm.841,9.074h-1.7V18h1.7Z\" fill=\"#5e5e5e\"/><path d=\"M116.117,25.42a2.955,2.955,0,0,1-1.31.248q-2.182,0-2.183-2.094V19.333h-1.253V18h1.253V16.264l1.7-.483V18h1.794v1.333h-1.794v3.75a1.484,1.484,0,0,0,.241.952,1.006,1.006,0,0,0,.807.285,1.167,1.167,0,0,0,.746-.248Z\" fill=\"#5e5e5e\"/><path d=\"M124.248,25.5h-1.7V21.4q0-2.226-1.487-2.226a1.556,1.556,0,0,0-1.26.644,2.568,2.568,0,0,0-.513,1.649V25.5h-1.707V14.4h1.707v4.849h.029a2.685,2.685,0,0,1,2.432-1.421q2.5,0,2.5,3.055Z\" fill=\"#5e5e5e\"/><path d=\"M141.907,25.5h-1.728V18.7q0-.835.1-2.043h-.029a6.992,6.992,0,0,1-.285.988L136.831,25.5h-1.2l-3.143-7.793a7.236,7.236,0,0,1-.277-1.047h-.029q.057.63.058,2.058V25.5h-1.611V15h2.453l2.762,7a10.884,10.884,0,0,1,.41,1.2h.036c.181-.551.327-.962.44-1.23L139.541,15h2.366Z\" fill=\"#5e5e5e\"/><path d=\"M145.158,16.426a1.022,1.022,0,0,1-.714-.272.89.89,0,0,1-.3-.688.916.916,0,0,1,.3-.7,1.009,1.009,0,0,1,.714-.278,1.043,1.043,0,0,1,.733.278.911.911,0,0,1,.3.7.9.9,0,0,1-.3.678A1.038,1.038,0,0,1,145.158,16.426ZM146,25.5h-1.7V18H146Z\" fill=\"#5e5e5e\"/><path d=\"M153.589,25.156a4.2,4.2,0,0,1-2.131.52,3.606,3.606,0,0,1-2.695-1.044,3.691,3.691,0,0,1-1.026-2.706,4.07,4.07,0,0,1,1.1-2.978,3.944,3.944,0,0,1,2.948-1.124,4.3,4.3,0,0,1,1.81.36v1.582a2.743,2.743,0,0,0-1.67-.586,2.32,2.32,0,0,0-1.766.728,2.665,2.665,0,0,0-.688,1.908,2.536,2.536,0,0,0,.648,1.838,2.3,2.3,0,0,0,1.739.674,2.716,2.716,0,0,0,1.729-.652Z\" fill=\"#5e5e5e\"/><path d=\"M159.625,19.619a1.4,1.4,0,0,0-.887-.242,1.513,1.513,0,0,0-1.259.682,3.04,3.04,0,0,0-.506,1.852V25.5h-1.7V18h1.7v1.545H157a2.606,2.606,0,0,1,.766-1.233,1.724,1.724,0,0,1,1.154-.444,1.432,1.432,0,0,1,.7.14Z\" fill=\"#5e5e5e\"/><path d=\"M164.02,25.676a3.719,3.719,0,0,1-2.773-1.051,3.8,3.8,0,0,1-1.036-2.787,3.7,3.7,0,0,1,3.991-4.014,3.6,3.6,0,0,1,2.739,1.033,3.986,3.986,0,0,1,.982,2.864,3.932,3.932,0,0,1-1.059,2.875A3.8,3.8,0,0,1,164.02,25.676Zm.08-6.5a1.938,1.938,0,0,0-1.575.7,2.913,2.913,0,0,0-.579,1.919,2.744,2.744,0,0,0,.586,1.856,1.965,1.965,0,0,0,1.568.678,1.87,1.87,0,0,0,1.542-.666,2.956,2.956,0,0,0,.538-1.9,3,3,0,0,0-.538-1.911A1.858,1.858,0,0,0,164.1,19.18Z\" fill=\"#5e5e5e\"/><path d=\"M169.182,25.266V23.691a3.392,3.392,0,0,0,2.1.725q1.539,0,1.538-.908a.714.714,0,0,0-.132-.436,1.241,1.241,0,0,0-.355-.318,2.784,2.784,0,0,0-.527-.25q-.3-.108-.677-.248a7.052,7.052,0,0,1-.832-.389,2.545,2.545,0,0,1-.615-.465,1.745,1.745,0,0,1-.37-.59,2.145,2.145,0,0,1-.125-.769,1.775,1.775,0,0,1,.256-.955,2.223,2.223,0,0,1,.69-.7,3.289,3.289,0,0,1,.98-.425,4.511,4.511,0,0,1,1.136-.143,5.181,5.181,0,0,1,1.86.315v1.487a3.136,3.136,0,0,0-1.816-.542,2.317,2.317,0,0,0-.582.066,1.472,1.472,0,0,0-.443.183.886.886,0,0,0-.286.282.669.669,0,0,0-.1.363.77.77,0,0,0,.1.41.93.93,0,0,0,.3.3,2.654,2.654,0,0,0,.483.234q.282.105.649.23a9.4,9.4,0,0,1,.867.4,2.886,2.886,0,0,1,.656.465,1.806,1.806,0,0,1,.417.6,2.034,2.034,0,0,1,.147.81,1.847,1.847,0,0,1-.264,1,2.205,2.205,0,0,1-.7.7,3.292,3.292,0,0,1-1.015.413,5.222,5.222,0,0,1-1.212.136A5.115,5.115,0,0,1,169.182,25.266Z\" fill=\"#5e5e5e\"/><path d=\"M179.443,25.676a3.717,3.717,0,0,1-2.772-1.051,3.793,3.793,0,0,1-1.036-2.787,3.7,3.7,0,0,1,3.991-4.014,3.6,3.6,0,0,1,2.739,1.033,3.986,3.986,0,0,1,.982,2.864,3.932,3.932,0,0,1-1.059,2.875A3.8,3.8,0,0,1,179.443,25.676Zm.08-6.5a1.936,1.936,0,0,0-1.574.7,2.908,2.908,0,0,0-.579,1.919,2.739,2.739,0,0,0,.586,1.856,1.964,1.964,0,0,0,1.567.678,1.868,1.868,0,0,0,1.542-.666,2.95,2.95,0,0,0,.539-1.9,2.99,2.99,0,0,0-.539-1.911A1.857,1.857,0,0,0,179.523,19.18Z\" fill=\"#5e5e5e\"/><path d=\"M189.067,15.781a1.533,1.533,0,0,0-.784-.2q-1.237,0-1.237,1.4V18h1.743v1.333h-1.736V25.5h-1.7V19.333h-1.282V18h1.282V16.784a2.362,2.362,0,0,1,.777-1.871,2.82,2.82,0,0,1,1.94-.684,2.879,2.879,0,0,1,1,.138Z\" fill=\"#5e5e5e\"/><path d=\"M194.23,25.42a2.955,2.955,0,0,1-1.31.248q-2.182,0-2.183-2.094V19.333h-1.253V18h1.253V16.264l1.7-.483V18h1.793v1.333h-1.793v3.75a1.484,1.484,0,0,0,.241.952,1,1,0,0,0,.806.285,1.165,1.165,0,0,0,.746-.248Z\" fill=\"#5e5e5e\"/><rect x=\"13\" y=\"11\" width=\"9\" height=\"9\" fill=\"#f25022\"/><rect x=\"13\" y=\"21\" width=\"9\" height=\"9\" fill=\"#00a4ef\"/><rect x=\"23\" y=\"11\" width=\"9\" height=\"9\" fill=\"#7fba00\"/><rect x=\"23\" y=\"21\" width=\"9\" height=\"9\" fill=\"#ffb900\"/></svg>\n                </div>\n            </Layout>\n        </>\n    );\n};\n","import React from 'react';\nimport { routerService } from '../../services';\nimport Layout from '../../components/layout/layout';\nimport TaskNameInput from './TaskNameInput/TaskNameInput';\n\nexport default () => {\n\n    return (\n        <>\n            <Layout hideNavDrawer={true} routeInfo={routerService.getRouteInfo('customTimer')}>\n                <>\n                    <TaskNameInput></TaskNameInput>\n                </>\n            </Layout>\n        </>\n    )\n};","import React from 'react';\nimport './App.css';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Screens from './screens';\nimport { routeConfig } from './services/config';\nimport './shared/global.scss';\nimport userService from '../src/services/user.service';\nimport msal from '../src/services/microsoft-one-note.service';\n\nconst App: React.FC = () => {\n  if(userService.isLoggedIn()){\n    msal.checkTokenExpiryAndRenew();\n  }\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path={routeConfig.notebooks.path} exact component={Screens.Notebooks} />\n        <Route path={routeConfig.login.path} exact component={Screens.Login} />\n        <Route path={routeConfig.sections.path} exact component={Screens.Sections} />\n        <Route path={routeConfig.pages.path} exact component={Screens.Pages} />\n        <Route path={routeConfig.timer.path} exact component={Screens.Timer} />\n        <Route path={routeConfig.recentlyRevisedPages.path} exact component={Screens.RecentlyRevisedPages} />\n        <Route path={routeConfig.stats.path} exact component={Screens.Stats} />\n        <Route path={routeConfig.customTimer.path} exact component={Screens.CustomTimer} />\n        <Route path='/auth' exact component={Screens.Timer} />\n        <Redirect to={routeConfig.notebooks.path} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskInput\":\"_taskNameInput_taskInput__XjCYg\",\"selectBoxCntr\":\"_taskNameInput_selectBoxCntr__1piJT\",\"selectBoxGrid\":\"_taskNameInput_selectBoxGrid__2D891\",\"selectBox\":\"_taskNameInput_selectBox__3Oy2D\"};","module.exports = __webpack_public_path__ + \"static/media/logo.7d5e5832.svg\";"],"sourceRoot":""}